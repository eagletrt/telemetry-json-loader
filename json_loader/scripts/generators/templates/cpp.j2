#include "json_loader.h"

{% for struct in schema.structs -%}
template <>
void CheckJson(const {{struct.typename}}& obj, const rapidjson::Document& doc)
{
{%- for field in struct.fields %}
    if(!doc.HasMember("{{field.name}}"))
        std::cout << "{{struct.typename}} MISSING FIELD: {{field.name}}" << std::endl; 
{%- endfor %}
}

template<>
void Serialize(rapidjson::Document& out, const {{struct.typename}}& obj)
{
}
template<>
void Deserialize({{struct.typename}}& obj, rapidjson::Document& doc)
{
{%- for field in struct.fields %}
{%- if isinstance(field, Struct)%}
    {
        rapidjson::Document new_doc;
        new_doc.SetObject();
        new_doc.GetObj() = doc["{{field.name}}"].GetObj();
        Deserialize(obj.{{field.name}}, new_doc);
    }
{%- endif %}
{%- if isinstance(field, BasicField)%}
    obj.{{field.name}} = doc["{{field.name}}"].Get{{field.get_rapidjson_type()}}();
{%- endif %}
{%- if isinstance(field, Vector)%}
{{field.get_cpp_loop()}}
{%- endif %}
{%- endfor %}
}

template<>
void LoadStruct({{struct.typename}}& out, const std::string& path)
{
    rapidjson::Document doc;
    LoadJSON(doc, path);
    Deserialize(out, doc);
}

{% endfor -%}

void LoadJSON(rapidjson::Document& out, const std::string& path)
{
    std::ifstream f(path);
    std::stringstream buffer;
    buffer << f.rdbuf();
    out.Parse(buffer.str().c_str());
}